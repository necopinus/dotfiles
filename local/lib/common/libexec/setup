#!/usr/bin/env bash

set -e

# Determine system information
#
# Provides: OS, FLAVOR, ARCH, XDG_*_HOME, XDG_*_DIR, XDG_RUNTIME_DIR
#
if [[ -f $HOME/local/lib/common/lib/system.lib.sh ]]; then
	source $HOME/local/lib/common/lib/system.lib.sh
else
	echo "System information library not found!"
	exit 1
fi

# Exit if system isn't supported
#
if [[ "$OS" == "unsupported" ]] \
|| [[ "$FLAVOR" == "unsupported" ]] \
|| [[ "$ARCH" == "unsupported" ]]; then
	echo "Setup is unsupported on this system."
	echo ""
	echo "OS: $OS"
	echo "FLAVOR: $FLAVOR"
	echo "ARCH: $ARCH"
	exit 1
fi

# Make sure the most current dotfiles version is checked out
#
echo "Making sure that the most recent dotfiles are available"
(
	cd $HOME
	git --git-dir=$HOME/.dotfiles --work-tree=$HOME checkout -f
)

# Enable Touch ID support with sudo on macOS
#
if [[ "$OS" == "macos" ]]; then
	echo "Enabling Touch ID support for sudo"
	if [[ ! -f /etc/pam.d/sudo_local ]] \
	|| [[ $(grep -c '^auth .* pam_tid.so' /etc/pam.d/sudo_local) -eq 0 ]]; then
		sudo tee /etc/pam.d/sudo_local <<- EOF
		# sudo_local: local config file which survives system update and is included for sudo
		# uncomment following line to enable Touch ID for sudo
		auth       sufficient     pam_tid.so
		EOF
		sudo chmod -v 444 /etc/pam.d/sudo_local
	fi
fi

# Make sure that essential tools are installed
#
echo "Ensuring that required command line tools are installed"

if [[ "$FLAVOR" == "macos" ]]; then
	xcode-select --install || true

	echo "Checking for XCode developer tools installation"
	until $(xcode-select --print-path &> /dev/null); do
		sleep 4;
	done
elif [[ "$FLAVOR" == "debian" ]]; then
	sudo apt update
	sudo apt full-upgrade -y
	sudo apt install -y \
	         build-essential \
	         curl \
	         dialog \
	         file \
	         git \
	         gnupg \
	         procps
elif [[ "$FLAVOR" == "termux" ]]; then
	termux-change-repo
	pkg upgrade
	pkg install \
	    git \
	    tur-repo \
	    x11-repo
fi

# Install (or set up) Homebrew
#
if [[ "$FLAVOR" != "termux" ]]; then
	if [[ -z "$(which brew 2> /dev/null)" ]]; then
		echo "Setting up Homebrew"

		if [[ -x /opt/homebrew/bin/brew ]]; then
			eval "$(/opt/homebrew/bin/brew shellenv bash)"
		elif [[ -x /usr/local/bin/brew ]]; then
			eval "$(/usr/local/bin/brew shellenv bash)"
		elif [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
			eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv bash)"
		else
			curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | env NONINTERACTIVE=1 bash -l
			if [[ "$OS" == "macos" ]]; then
				if [[ "$ARCH" == "aarch64" ]]; then
					eval "$(/opt/homebrew/bin/brew shellenv bash)"
				elif [[ "$ARCH" == "amd64" ]]; then
					eval "$(/usr/local/bin/brew shellenv bash)"
				fi
			elif [[ "$OS" == "linux" ]]; then
				eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv bash)"
			fi
		fi
	fi

	echo "Disabling Homebrew analytics"
	brew analytics off
fi

export PATH="$HOME/bin:$PATH"

# Install additional tooling
#
echo "Installing additional tooling"

if [[ "$FLAVOR" == "macos" ]]; then
	brew install \
	     adobe-creative-cloud \
	     aichat \
	     android-platform-tools \
	     bat \
	     brave-browser \
	     calibre \
	     cd-discid \
	     charmbracelet/tap/glow \
	     curl \
	     dos2unix \
	     duf \
	     dust \
	     eza \
	     fd \
	     ffmpeg \
	     fish \
	     font-jetbrains-mono-nerd-font \
	     fzf \
	     gawk \
	     git-delta \
	     gnupg \
	     gopls \
	     homebrew/cask/handbrake \
	     homebrew/cask/syncthing \
	     imagemagick \
	     jpeg-turbo \
	     jq \
	     jq-lsp \
	     kitty \
	     libqalculate \
	     less \
	     lua-language-server \
	     makemkv \
	     msgpack-tools \
	     neovim \
	     node \
	     normalize \
	     obsidian \
	     openssh \
	     optipng \
	     pandoc \
	     pinentry-mac \
	     pngpaste \
	     poppler \
	     procs \
	     proton-drive \
	     pstree \
	     python \
	     qobuz-downloader \
	     rclone \
	     ripgrep \
	     rsgain \
	     rsync \
	     rust \
	     rust-analyzer \
	     scroll-reverser \
	     shellcheck \
	     shfmt \
	     solidity \
	     sqlite \
	     starship \
	     stylua \
	     tinymist \
	     tmux \
	     tree-sitter-cli \
	     tresorit \
	     uutils-coreutils \
	     uutils-diffutils \
	     uutils-findutils \
	     vlc \
	     xz \
	     yarn \
	     yt-dlp \
	     yubico-yubikey-manager \
	     zoxide \
	     zstd

	# The following packages need to be built from source to avoid
	# library API mis-matches
	#
	brew install --build-from-source \
	     abcde
elif [[ "$FLAVOR" == "termux" ]]; then
	pkg install \
	    aichat \
	    android-tools \
	    bat \
	    binutils \
	    build-essential \
	    busybox \
	    curl \
	    dbus \
	    dos2unix \
	    duf \
	    dust \
	    eza \
	    fd \
	    ffmpeg \
	    fish \
	    fontconfig-utils \
	    fzf \
	    gawk \
	    git \
	    git-delta \
	    glow \
	    gnupg \
	    gopls \
	    handbrake \
	    imagemagick \
	    jq \
	    jq-lsp \
	    kitty \
	    less \
	    libjpeg-turbo-progs \
	    lua-language-server \
	    man \
	    ndk-sysroot-gcc-compact \
	    neovim \
	    nodejs \
	    openssh \
	    optipng \
	    pandoc \
	    poppler \
	    procs \
	    proot-distro \
	    pulseaudio \
	    python-greenlet \
	    python-lxml \
	    python-msgpack \
	    python-pynvim \
	    qalc \
	    rclone \
	    ripgrep \
	    rsgain \
	    rsync \
	    rust \
	    rust-analyzer \
	    shellcheck \
	    shfmt \
	    solidity \
	    sqlite \
	    starship \
	    stylua \
	    termux-am \
	    termux-api \
	    termux-x11-nightly \
	    tinymist \
	    tmux \
	    unzip \
	    uuid-utils \
	    uutils-coreutils \
	    which \
	    xclip \
	    xfce4 \
	    xsel \
	    xz-utils \
	    yarn \
	    yt-dlp \
	    zip \
	    zoxide \
	    zstd

	$HOME/local/lib/linux/common/libexec/update-jetbrains-mono

	$HOME/local/lib/linux/termux/common/bin/debian --install
	$HOME/local/lib/linux/common/libexec/update-obsidian

	if [[ "$ARCH" == "aarch64" ]]; then
		$HOME/local/lib/linux/termux/aarch64/bin/kali --install
	fi
elif [[ "$FLAVOR" == "debian" ]]; then
	sudo mkdir -p /usr/share/keyrings
	sudo curl -fsSLo \
	     /usr/share/keyrings/brave-browser-archive-keyring.gpg \
	     https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
	sudo tee /etc/apt/sources.list.d/brave-browser.sources > /dev/null <<- EOF
		Types: deb
		URIs: https://brave-browser-apt-release.s3.brave.com
		Suites: stable
		Components: main
		Architectures: amd64 arm64
		Signed-By: /usr/share/keyrings/brave-browser-archive-keyring.gpg
		EOF

	sudo apt update
	sudo apt install -y \
	         android-sdk-platform-tools \
	         apt-utils \
	         brave-browser \
	         calibre \
	         eject \
	         fzf \
	         gawk \
	         gopls \
	         handbrake \
	         man-db \
	         podman \
	         qalc \
	         ssh \
	         tigervnc-standalone-server \
	         uuid-runtime \
	         unzip \
	         wl-clipboard \
	         xdg-utils \
	         xdg-user-dirs \
	         xfce4 \
	         yubikey-manager-qt \
	         zip

	brew install \
	     aichat \
	     bat \
	     cd-discid \
	     charmbracelet/tap/glow \
	     curl \
	     dos2unix \
	     duf \
	     dust \
	     eza \
	     fd \
	     ffmpeg \
	     fish \
	     git-delta \
	     imagemagick \
	     jpeg-turbo \
	     jq \
	     jq-lsp \
	     less \
	     lua-language-server \
	     msgpack-tools \
	     neovim \
	     node \
	     normalize \
	     openssh \
	     optipng \
	     pandoc \
	     poppler \
	     procs \
	     python \
	     rclone \
	     ripgrep \
	     rsgain \
	     rsync \
	     rust \
	     rust-analyzer \
	     shellcheck \
	     shfmt \
	     solidity \
	     sqlite \
	     starship \
	     stylua \
	     tinymist \
	     tmux \
	     tree-sitter-cli \
	     uutils-coreutils \
	     uutils-diffutils \
	     uutils-findutils \
	     xclip \
	     xsel \
	     xz \
	     yarn \
	     yt-dlp \
	     zoxide \
	     zstd

	# The following packages need to be built from source to avoid
	# library API mis-matches
	#
	brew install --build-from-source \
	     abcde

	# Additional "manual" installs
	#
	$HOME/local/lib/linux/common/libexec/update-jetbrains-mono
	$HOME/local/lib/linux/debian/common/libexec/update-kitty

	#sudo apt install \
	#         libatspi2.0-0 \
	#         libnotify4 \
	#         libnss3 \
	#         libsecret-1-0 \
	#         libuuid1 \
	#         libxss1 \
	#         libxtst6 \
	#         libgtk-3-0
	#$HOME/local/lib/linux/common/libexec/update-obsidian

	# System-level tweaks
	#
	sudo ln -sf /usr/share/zoneinfo/America/Denver /etc/localtime

	sudo systemctl stop lightdm.service
	sudo systemctl disable lightdm.service

	SSH_LOCAL_CONF="$(mktemp)"
	cat > "$SSH_LOCAL_CONF" <<- EOF
	Port 2222
	PermitRootLogin no
	PubkeyAuthentication yes
	PasswordAuthentication no
	AllowUsers droid necopinus
	AuthenticationMethods publickey
	EOF
	sudo mv "$SSH_LOCAL_CONF" /etc/ssh/sshd_config.d/local.conf
	sudo chown root:root /etc/ssh/sshd_config.d/local.conf
	sudo chmod 644 /etc/ssh/sshd_config.d/local.conf
	sudo systemctl restart ssh.service
fi

# Install Node.js and Python packages
#
if [[ ! -d "$XDG_CACHE_HOME/versions" ]]; then
	mkdir -p "$XDG_CACHE_HOME/versions"
fi

yarn global add $(cat $HOME/.default-npm-packages | xargs)
node --version > "$XDG_CACHE_HOME/versions/node"

if [[ ! -f $HOME/local/lib/python/bin/python ]]; then
	python3 -m venv --system-site-packages $HOME/local/lib/python
fi
$HOME/local/lib/python/bin/python -m pip install -U pip
$HOME/local/lib/python/bin/python -m pip install $(cat $HOME/.default-python-packages | xargs)
$HOME/local/lib/python/bin/python --version > "$XDG_CACHE_HOME/versions/python"

# Set up directories and symlinks
#
echo "Symlinking dotfiles and directories"

if [[ "$FLAVOR" == "termux" ]]; then
	termux-setup-storage
fi

touch $XDG_CONFIG_HOME/rclone/rclone.conf

if [[ -d $HOME/.cache ]] && [[ ! -L $HOME/.cache ]]; then
	mv -v $HOME/.cache $XDG_CACHE_HOME
elif [[ ! -e $HOME/.cache ]]; then
	mkdir -p $XDG_CACHE_HOME
fi
if [[ ! -e $HOME/.cache ]]; then
	ln -sf $XDG_CACHE_HOME $HOME/.cache
fi

if [[ -d $HOME/.config ]] && [[ ! -L $HOME/.config ]]; then
	cp -anv $HOME/.config/* $XDG_CONFIG_HOME/ || true
	rm -rf  $HOME/.config
fi
if [[ ! -e $HOME/.config ]]; then
	ln -sf  $XDG_CONFIG_HOME $HOME/.config
fi
if [[ "$OS" == "macos" ]] && [[ ! -e "$HOME/Library/Application Support/aichat" ]]; then
	ln -sf  $XDG_CONFIG_HOME/aichat "$HOME/Library/Application Support/aichat"
fi

if [[ -d $HOME/.local/bin ]] && [[ ! -L $HOME/.local/bin ]]; then
	cp -anv $HOME/.local/bin/* $HOME/bin/ || true
	rm -rf  $HOME/.local/bin
fi
if [[ ! -e $HOME/local/bin ]]; then
	ln -sf  $HOME/bin $HOME/local/bin
fi

if [[ -d $HOME/.local ]] && [[ ! -L $HOME/.local ]]; then
	cp -anv $HOME/.local/* $HOME/local/ || true
	rm -rf  $HOME/.local
fi
if [[ ! -e $HOME/.local ]]; then
	ln -sf  $HOME/local $HOME/.local
fi
if [[ ! -e $HOME/.var ]]; then
	ln -sf  $HOME/local $HOME/.var
fi

if [[ -e $HOME/config/kitty/open-actions.conf ]] \
&& [[ ! -L $HOME/config/kitty/open-actions.conf ]]; then
	rm -f $HOME/config/kitty/open-actions.conf
	ln -sf launch-actions.conf $HOME/config/kitty/open-actions.conf
fi

if [[ -d $HOME/storage/shared/Documents/Obsidian ]]; then
	ln -sf $HOME/storage/shared/Documents/Obsidian $HOME/notes
fi

# Set up XDG user directories
#
echo "Setting up XDG directories"

cat > config/user-dirs.dirs << EOF
# This file is written by xdg-user-dirs-update
# If you want to change or add directories, just edit the line you're
# interested in. All local changes will be retained on the next run.
# Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
# homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
# absolute path. No other format is supported.
# 
EOF
if [[ "$OS" == "macos" ]]; then
	cat >> config/user-dirs.dirs <<- EOF
	XDG_DESKTOP_DIR="\$HOME/Desktop"
	XDG_DOCUMENTS_DIR="\$HOME/Documents"
	XDG_DOWNLOAD_DIR="\$HOME/Downloads"
	XDG_MUSIC_DIR="\$HOME/Music"
	XDG_PICTURES_DIR="\$HOME/Pictures"
	XDG_PUBLICSHARE_DIR="\$HOME/Public"
	XDG_TEMPLATES_DIR="\$HOME/Documents/Templates"
	XDG_VIDEOS_DIR="\$HOME/Movies"
	EOF
elif [[ "$FLAVOR" == "termux" ]]; then
	cat >> config/user-dirs.dirs <<- EOF
	XDG_DESKTOP_DIR="\$HOME/data/desktop"
	XDG_DOCUMENTS_DIR="\$HOME/storage/shared/Documents"
	XDG_DOWNLOAD_DIR="\$HOME/storage/downloads"
	XDG_MUSIC_DIR="\$HOME/storage/music"
	XDG_PICTURES_DIR="\$HOME/storage/pictures"
	XDG_PUBLICSHARE_DIR="\$HOME/public"
	XDG_TEMPLATES_DIR="\$HOME/storage/shared/Documents/Templates"
	XDG_VIDEOS_DIR="\$HOME/storage/movies"
	EOF
elif [[ "$OS" == "linux" ]]; then
	cat >> config/user-dirs.dirs <<- EOF
	XDG_DESKTOP_DIR="\$HOME/data/desktop"
	XDG_DOCUMENTS_DIR="\$HOME/data"
	XDG_DOWNLOAD_DIR="\$HOME/downloads"
	XDG_MUSIC_DIR="\$HOME/data/music"
	XDG_PICTURES_DIR="\$HOME/data/pictures"
	XDG_PUBLICSHARE_DIR="\$HOME/public"
	XDG_TEMPLATES_DIR="\$HOME/data/templates"
	XDG_VIDEOS_DIR="\$HOME/data/videos"
	EOF
fi

source config/user-dirs.dirs

if [[ ! -d "$XDG_DOCUMENTS_DIR" ]]; then
	mkdir -p "$XDG_DOCUMENTS_DIR"
	if [[ -d "$HOME/Documents" ]] \
	&& [[ "$XDG_DOCUMENTS_DIR" != "$HOME/Documents" ]]; then
		cp -anv "$HOME/Documents"/* "$XDG_DOCUMENTS_DIR"/ || true
		rm -rf  "$HOME/Documents"
	fi
fi

if [[ ! -d "$XDG_DESKTOP_DIR" ]]; then
	mkdir -p "$XDG_DESKTOP_DIR"
	if [[ -d "$HOME/Desktop" ]] \
	&& [[ "$XDG_DESKTOP_DIR" != "$HOME/Desktop" ]]; then
		cp -anv "$HOME/Desktop"/* "$XDG_DESKTOP_DIR"/ || true
		rm -rf  "$HOME/Desktop"
	fi
fi

if [[ ! -d "$XDG_DOWNLOAD_DIR" ]]; then
	mkdir -p "$XDG_DOWNLOAD_DIR"
	if [[ -d "$HOME/Downloads" ]] \
	&& [[ "$XDG_DOWNLOAD_DIR" != "$HOME/Downloads" ]]; then
		cp -anv "$HOME/Downloads"/* "$XDG_DOWNLOAD_DIR"/ || true
		rm -rf  "$HOME/Downloads"
	fi
fi

if [[ ! -d "$XDG_MUSIC_DIR" ]]; then
	mkdir -p "$XDG_MUSIC_DIR"
	if [[ -d "$HOME/Music" ]] \
	&& [[ "$XDG_MUSIC_DIR" != "$HOME/Music" ]]; then
		cp -anv "$HOME/Music"/* "$XDG_MUSIC_DIR"/ || true
		rm -rf  "$HOME/Music"
	fi
fi

if [[ ! -d "$XDG_PICTURES_DIR" ]]; then
	mkdir -p "$XDG_PICTURES_DIR"
	if [[ -d "$HOME/Pictures" ]] \
	&& [[ "$XDG_PICTURES_DIR" != "$HOME/Pictures" ]]; then
		cp -anv "$HOME/Pictures"/* "$XDG_PICTURES_DIR"/ || true
		rm -rf  "$HOME/Pictures"
	fi
fi

if [[ ! -d "$XDG_PUBLICSHARE_DIR" ]]; then
	mkdir -p "$XDG_PUBLICSHARE_DIR"
	if [[ -d "$HOME/Public" ]] \
	&& [[ "$XDG_PUBLICSHARE_DIR" != "$HOME/Public" ]]; then
		cp -anv "$HOME/Public"/* "$XDG_PUBLICSHARE_DIR"/ || true
		rm -rf  "$HOME/Public"
	fi
fi

if [[ ! -d "$XDG_TEMPLATES_DIR" ]]; then
	mkdir -p "$XDG_TEMPLATES_DIR"
	if [[ -d "$HOME/Templates" ]] \
	&& [[ "$XDG_TEMPLATES_DIR" != "$HOME/Templates" ]]; then
		cp -anv "$HOME/Templates"/* "$XDG_TEMPLATES_DIR"/ || true
		rm -rf  "$HOME/Templates"
	fi
fi

if [[ ! -d "$XDG_VIDEOS_DIR" ]]; then
	mkdir -p "$XDG_VIDEOS_DIR"
	if [[ -d "$HOME/Videos" ]] \
	&& [[ "$XDG_VIDEOS_DIR" != "$HOME/Videos" ]]; then
		cp -anv "$HOME/Videos"/* "$XDG_VIDEOS_DIR"/ || true
		rm -rf  "$HOME/Videos"
	fi
fi

# Calibre pre-setup
#
if [[ "$OS" == "macos" ]]; then
	mkdir -p $HOME/Library/Preferences/calibre
else
	mkdir -p $XDG_CONFIG_HOME/calibre
fi
mkdir -p $HOME/data/calibre

# Generate bat's cache so that custom themes show up
#
# WARNING: There seems to be a bug in bat where the `cache` command
#          isn't detected if there's a file or directory called `cache`
#          that's the child of the current directory. Hence switching to
#          /, since... ~/cache is a thing in this setup.
#
if [[ "$FLAVOR" == "termux" ]]; then
	(
		cd $PREFIX/tmp
		bat cache --build
	)
else
	(
		cd /tmp
		bat cache --build
	)
fi

# The Debian Bookworm gpg-agent seems to need absolute paths in its
# configuration file, but gpg-agent on Termux requires the use of
# `~` for $HOME (probably because of Android's weird permissions).
# On macOS, either seem to work.
#
# In any case, we must generate ~/.gnupg/gpg-agent.conf by hand.
#
mkdir -p $HOME/.gnupg
if [[ "$FLAVOR" == "debian" ]]; then
	echo "pinentry-program $HOME/bin/pinentry" > $HOME/.gnupg/gpg-agent.conf
else
	echo "pinentry-program ~/bin/pinentry" > $HOME/.gnupg/gpg-agent.conf
fi
echo "enable-ssh-support" >> $HOME/.gnupg/gpg-agent.conf

# Fix permissions
#
chmod 700 $HOME/.ssh
find $HOME/.ssh -type d -exec chmod 700 "{}" \;
find $HOME/.ssh -type f -exec chmod 600 "{}" \;

chmod 700 $HOME/.gnupg
find $HOME/.gnupg -type d -exec chmod 700 "{}" \;
find $HOME/.gnupg -type f -exec chmod 600 "{}" \;

# Need to set up GPG environment here to work around Termux issues
#
export GPG_TTY=$(tty)
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
gpgconf --kill gpg-agent
gpg-connect-agent updatestartuptty /bye

# Set up git
#
# TODO: Figure out how to create a custom URL scheme
#       (delta.hyperlinks-file-link-format) and wrapper script for nvr
#       so that line numbers become clickable links leading to NeoViM
#       See:
#           - https://dandavison.github.io/delta/hyperlinks.html
#           - https://jyn.dev/how-i-use-my-terminal/
#
echo "Configuring git"

git config --global user.name "Nathan Acks"
git config --global user.email nathan.acks@cardboard-iguana.com

git config --global commit.gpgSign          true
git config --global core.pager              delta
git config --global interactive.diffFilter "delta --color-only"
git config --global merge.conflictStyle     zdiff3
git config --global pull.rebase             false

git config --global delta.blame-palette                 "#fbf1c7 #f4e8be #f2e5bc"
git config --global delta.hyperlinks                     true
git config --global delta.light                          true
git config --global delta.line-numbers                   true
git config --global delta.line-numbers-minus-style       red
git config --global delta.line-numbers-plus-style        green
git config --global delta.line-numbers-zero-style        normal
git config --global delta.minus-emph-style              "syntax #f3d0ad"
git config --global delta.minus-empty-line-marker-style "normal #f7e0bb"
git config --global delta.minus-non-emph-style          "syntax #f7e0bb"
git config --global delta.minus-style                   "syntax #f7e0bb"
git config --global delta.navigate                       true
git config --global delta.plus-emph-style               "syntax #ddd8a8"
git config --global delta.plus-empty-line-marker-style  "normal #ede4b7"
git config --global delta.plus-non-emph-style           "syntax #ede4b7"
git config --global delta.plus-style                    "syntax #ede4b7"
git config --global delta.side-by-side                   true

# Set up GPG and SSH, if applicable
#
if [[ $(ls -1 $HOME/.ssh/id_* 2> /dev/null | wc -l) -eq 0 ]] \
&& [[ $(gpg --list-secret-keys --with-colons \
              | grep -cE '^sec:(f|u):') -eq 0 ]]; then
	echo "Setting up initial SSH and GPG keys"

	# Create a new GPG/SSH keys
	#
	gpg --batch --expert --full-generate-key <<- EOF
	Key-Type: EDDSA
		Key-Curve: ed25519
		Key-Usage: sign auth
	Subkey-Type: ECDH
		Subkey-Curve: cv25519
		Subkey-Usage: encrypt
	Expire-Date: 4m
	Name-Real: Nathan Acks
	Name-Email: nathan.acks@cardboard-iguana.com
	EOF

	# Get the key ID of the new key
	#
	NEW_SECRET_KEY_ID="$(
		gpg --list-secret-keys --with-colons \
		| grep -E '^sec:(f|u):' \
		| cut -d: -f 5
	)"

	# Get the keygrip of the new key
	#
	# FIXME: I *think* that the output of --with-colons is ordered, and
	#        thus the keygrip for the primary key is just the first
	#        keygrip when this key is displayed. But I can't find any
	#        good documentation about this, so I may be wrong and this
	#        may break.
	#
	NEW_SECRET_KEY_GRIP="$(
		gpg --list-secret-keys --with-colons $NEW_SECRET_KEY_ID \
		| grep -E '^grp:' \
		| cut -d: -f 10 \
		| head -1
	)"

	# SSH setup
	#
	gpgconf --kill gpg-agent
	rm -f "$HOME"/.gnupg/sshcontrol
	gpg-connect-agent updatestartuptty /bye &> /dev/null
	ssh-add -l &> /dev/null || true
	gpg-connect-agent "keyattr $NEW_SECRET_KEY_GRIP Use-for-ssh: true" /bye > /dev/null
	echo "$NEW_SECRET_KEY_GRIP" >> "$HOME"/.gnupg/sshcontrol

	# Update git signing key
	#
	git config --global user.signingkey $NEW_SECRET_KEY_ID

	# Print public GPG and SSH keys for new secret key
	#
	echo ""
	echo "-----------------------------------------"
	echo "New secret key 0x$NEW_SECRET_KEY_ID created"
	echo "-----------------------------------------"
	echo ""
	gpg --list-keys --with-keygrip --keyid-format=long $NEW_SECRET_KEY_ID
	echo "GPG public key block:"
	echo ""
	gpg --armor --export $NEW_SECRET_KEY_ID
	echo ""
	echo "SSH public key:"
	echo ""
	gpg --export-ssh-key $NEW_SECRET_KEY_ID
	echo ""
	echo "You must add the public GPG and SSH key displayed above to GitHub before"
	echo "continuing."
	echo ""
	read -rs -n 1 -p "Press any key to continue once this step is complete."
	echo ""
fi

# Check out a few useful code repositories
#
echo "Making some useful code repositories available"
mkdir -p $HOME/src
(
	cd $HOME/src

	if [[ ! -d smart-contracts-hacking ]]; then
		git clone --recurse-submodules \
		    git@github.com:cardboard-iguana/smart-contracts-hacking.git
	fi
	if [[ ! -d resume ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/resume.git
	fi
	if [[ ! -d website-theme ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/website-theme.git
	fi

	if [[ ! -d backups ]]; then
		git clone --recurse-submodules \
		    git@github.com:The-Yak-Collective/backups.git
	fi
	if [[ ! -d GPTDiscord ]]; then
		git clone --recurse-submodules \
		    git@github.com:The-Yak-Collective/GPTDiscord.git
	fi
	if [[ ! -d yakcollective ]]; then
		git clone --recurse-submodules \
		    git@github.com:The-Yak-Collective/yakcollective.git
	fi

	if [[ ! -d cardboard-iguana.com ]]; then
		git clone --recurse-submodules \
		    git@github.com:cardboard-iguana/cardboard-iguana.com.git
	fi
	if [[ ! -d chateaumaxmin.info ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/chateaumaxmin.info.git
	fi
	if [[ ! -d delphi-strategy.com ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/delphi-strategy.com.git
	fi
	if [[ ! -d digital-orrery.com ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/digital-orrery.com.git
	fi
	if [[ ! -d necopinus.xyz ]]; then
		git clone --recurse-submodules \
		    git@github.com:necopinus/necopinus.xyz.git
	fi

	if [[ ! -d twitter-archive-parser ]]; then
		git clone --recurse-submodules \
		    https://github.com/timhutton/twitter-archive-parser.git
	fi
)

# Install NeoViM plugins
#
# NOTE: This must be done *after* git is setup!
#
nvim --headless "+Lazy! sync" +qa

# Try (probably futilely) to keep environment variables in sync with the
# garbage fire that is systemd
#
if [[ "$OS" == "linux" ]]; then
	$HOME/local/lib/linux/common/libexec/update-environment
fi

# A reboot is STRONGLY recommended
#
echo ""
echo "Configuration complete!"
echo ""
echo "It is STRONGLY recommended that you reboot your system NOW."
