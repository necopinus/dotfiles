#!/usr/bin/env bash

set -e

KALI_DIR="$PREFIX/var/lib/proot-distro/installed-rootfs/kali"

# Timezone maintenance
#
ANDROID_TZ=$(getprop persist.sys.timezone)

if [[ -f "$KALI_DIR/usr/share/zoneinfo/$ANDROID_TZ" ]]; then
	cp $(realpath $KALI_DIR/usr/share/zoneinfo/$ANDROID_TZ) \
	              $KALI_DIR/etc/localtime
fi

# Pass along relevant environment variables
#
ENV_ARGS=()
if [[ -n "$DISPLAY" ]]; then
	ENV_ARGS+=(--env DISPLAY=$DISPLAY)
	ENV_ARGS+=(--env GALLIUM_DRIVER=virpipe)
	ENV_ARGS+=(--env MESA_GL_VERSION_OVERRIDE=4.0)
	ENV_ARGS+=(--env QT_QPA_PLATFORMTHEME=qt6ct)
	ENV_ARGS+=(--shared-tmp)
fi
if [[ -n "$PULSE_SERVER" ]]; then
	ENV_ARGS+=(--env PULSE_SERVER=$PULSE_SERVER)
fi

# Proot backup convenience function
#
function backup_kali_proot {
	if [[ -d "$KALI_DIR" ]]; then
		if [[ -d "$HOME/storage/downloads" ]]; then
			PROOT_BACKUP_DIR="$HOME/storage/downloads"
		else
			PROOT_BACKUP_DIR="$HOME"
		fi
		proot-distro backup --output "$PROOT_BACKUP_DIR"/kali.tar
		xz -v "$PROOT_BACKUP_DIR"/kali.tar
	else
		echo "Kali proot does not appear to be installed"
		exit 1
	fi
}

# Flow control
#
if [[ $# -eq 0 ]]; then
	exec proot-distro login kali \
	                --no-arch-warning \
	                --isolated "${ENV_ARGS[@]}" \
	                --env LANG=en_US.UTF-8 \
	                --env SHELL=/usr/bin/zsh \
	                --env TMUX_TMPDIR=/home/kali/.local/run \
	                --bind $HOME/storage/downloads:/home/kali/downloads \
	                --user kali \
	                -- /usr/bin/zsh -li
elif [[ $# -eq 1 ]] && [[ "$1" =~ ^--root$ ]]; then
	exec proot-distro login kali \
	                --no-arch-warning \
	                --isolated \
	                --env LANG=en_US.UTF-8 \
	                --user root
elif [[ $# -eq 1 ]] && [[ "$1" =~ ^--install$ ]]; then
	if [[ ! -d "$KALI_DIR" ]]; then
		TARBALL_SHA256="$(
			curl -fsSL https://kali.download/nethunter-images/current/rootfs/kali-nethunter-rootfs-minimal-arm64.tar.xz \
			     | sha256sum \
			     | sed 's/ .*//'
		)"

		sed "s/{{tarball-sha256}}/$TARBALL_SHA256/" \
		    $HOME/local/lib/linux/termux/aarch64/proot/kali/kali.override.sh \
			> "$PREFIX/etc/proot-distro/kali.override.sh"

		proot-distro install kali

		mkdir -p $KALI_DIR/etc
		rm $KALI_DIR/etc/localtime
		if [[ -f "$KALI_DIR/usr/share/zoneinfo/$ANDROID_TZ" ]]; then
			cp $(realpath $KALI_DIR/usr/share/zoneinfo/$ANDROID_TZ) \
			              $KALI_DIR/etc/localtime
		else
			cp $(realpath $KALI_DIR/usr/share/zoneinfo/UTC) \
			              $KALI_DIR/etc/localtime
		fi
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/etc/zsh_command_not_found \
		   $KALI_DIR/etc/zsh_command_not_found

		mkdir -p $KALI_DIR/etc/sudoers.d
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/etc/sudoers.d/kali \
		   $KALI_DIR/etc/sudoers.d/kali

		mkdir -p $KALI_DIR/usr/bin
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/usr/bin/systemctl.sh \
		   $KALI_DIR/usr/bin/systemctl.sh
		cp $KALI_DIR/usr/bin/systemctl \
		   $KALI_DIR/usr/bin/systemctl.bin
		cp $KALI_DIR/usr/bin/systemctl.sh \
		   $KALI_DIR/usr/bin/systemctl

		mkdir -p $KALI_DIR/root
		touch $KALI_DIR/root/.hushlogin

		mkdir -p $KALI_DIR/home/kali
		touch $KALI_DIR/home/kali/.hushlogin
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.bash_aliases \
		   $KALI_DIR/home/kali/.bash_aliases
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.inputrc \
		   $KALI_DIR/home/kali/.inputrc
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.zshenv \
		   $KALI_DIR/home/kali/.zshenv

		mkdir -p $KALI_DIR/home/kali/.BurpSuite
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.BurpSuite/UserConfigCommunity.json \
		   $KALI_DIR/home/kali/.BurpSuite/UserConfigCommunity.json

		mkdir -p $KALI_DIR/home/kali/.config
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.config/user-dirs.dirs \
		   $KALI_DIR/home/kali/.config/user-dirs.dirs

		mkdir -p $KALI_DIR/home/kali/.config/nano
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.config/nano/nanorc \
		   $KALI_DIR/home/kali/.config/nano/nanorc

		mkdir -p $KALI_DIR/home/kali/.config/tmux
		cp $HOME/local/lib/linux/termux/aarch64/proot/kali/home/kali/.config/tmux/tmux.conf \
		   $KALI_DIR/home/kali/.config/tmux/tmux.conf

		mkdir -p $KALI_DIR/home/kali/.local/run

		mkdir -p $KALI_DIR/home/kali/data/desktop
		mkdir -p $KALI_DIR/home/kali/data/music
		mkdir -p $KALI_DIR/home/kali/data/pictures
		mkdir -p $KALI_DIR/home/kali/data/templates
		mkdir -p $KALI_DIR/home/kali/data/videos
		mkdir -p $KALI_DIR/home/kali/downloads
		mkdir -p $KALI_DIR/home/kali/public

		mkdir -p $KALI_DIR/var/lib/postgresql
		touch $KALI_DIR/var/lib/postgresql/.hushlogin

		proot-distro clear-cache

		# Fix bad permissions on /usr/bin/sudo
		#
		proot-distro login kali --no-arch-warning --isolated --user root \
		                        -- chmod u+s /usr/bin/sudo

		# For some reason, setting up PostgreSQL/Metasploit works when
		# called from proot-distro, but does not work when called using
		# the run_proot_cmd helper function when building a new
		# environment. For anyone interested in trying to track this
		# down, the error message generated by pg_createcluster is:
		#
		#     FATAL:   Could not create shared memory segment: Function not implemented
		#     DETAIL:  Failed system call was shmget
		#
		proot-distro login kali --no-arch-warning --isolated --user postgres \
		                        -- pg_createcluster 17 main
		proot-distro login kali --no-arch-warning --isolated --user postgres \
		                        -- /etc/init.d/postgresql start
		proot-distro login kali --no-arch-warning --isolated --user kali \
		                        -- msfdb init
		proot-distro login kali --no-arch-warning --isolated --user postgres \
		                        -- /etc/init.d/postgresql stop

		# Hack so that PostgreSQL upgrades don't fail
		#
		sed -i 's/^stop_version/#stop_version/' \
		       $KALI_DIR/var/lib/dpkg/info/postgresql-*.prerm
	else
		echo "Kali proot appears to be already installed"
		# Do not exit with failure here, as this will bork the setup script
	fi
elif [[ $# -eq 1 ]] && [[ "$1" =~ ^--update$ ]]; then
	if [[ -d "$KALI_DIR" ]]; then
		cp $KALI_DIR/usr/bin/systemctl.bin \
		   $KALI_DIR/usr/bin/systemctl

		proot-distro login kali --no-arch-warning --isolated \
		                        -- apt update
		proot-distro login kali --no-arch-warning --isolated \
		                        -- apt full-upgrade
		proot-distro login kali --no-arch-warning --isolated \
		                        -- apt autoremove --purge --autoremove
		proot-distro login kali --no-arch-warning --isolated \
		                        -- apt clean

		cp $KALI_DIR/usr/bin/systemctl \
		   $KALI_DIR/usr/bin/systemctl.bin
		cp $KALI_DIR/usr/bin/systemctl.sh \
		   $KALI_DIR/usr/bin/systemctl

		# Fix bad permissions on /usr/bin/sudo
		#
		proot-distro login kali --no-arch-warning --isolated --user root \
		                        -- chmod u+s /usr/bin/sudo

		# Hack so that PostgreSQL upgrades don't fail
		#
		sed -i 's/^stop_version/#stop_version/' \
		       $KALI_DIR/var/lib/dpkg/info/postgresql-*.prerm
	else
		echo "Kali proot does not appear to be installed"
		exit 
	fi
elif [[ $# -eq 1 ]] && [[ "$1" =~ ^--backup$ ]]; then
	backup_kali_proot
elif [[ $# -eq 1 ]] && [[ "$1" =~ ^--archive$ ]]; then
	backup_kali_proot
	
	if [[ -d "$KALI_DIR" ]]; then
		proot-distro remove kali
	else
		echo "Kali proot does not appear to be installed"
		exit 1
	fi
else
	exec proot-distro login kali \
	                --no-arch-warning \
	                --work-dir "$(pwd)" "${ENV_ARGS[@]}" \
	                --env LANG=en_US.UTF-8 \
	                --env SHELL=/usr/bin/zsh \
	                --env TMUX_TMPDIR=/home/kali/.local/run \
	                --bind $HOME/storage/downloads:/home/kali/downloads \
	                --user kali \
	                -- "$@"
fi
