#!/usr/bin/env bash

set -e

# System packages
#
if [[ -n "$(which apt 2> /dev/null)" ]]; then
	# Attempt to recover from crashes during configuration
	#
	sudo dpkg --configure --pending
	sudo apt install --fix-broken

	# Actual update
	#
	sudo apt update --fix-missing
	sudo apt full-upgrade
	sudo apt autoremove --purge --autoremove
	sudo apt clean
fi

brew update
brew upgrade
brew autoremove
brew cleanup -s

mise upgrade
mise cache clear

# Update "containerized" environments
#
#kali --update

# Directory cleanup / setup
#
rm -rf ${XDG_CACHE_HOME:-$HOME/.cache}/env

if [[ ! -d "${XDG_CACHE_HOME:-$HOME/.cache}/versions" ]]; then
	mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/versions"
fi

# Artisinal updates
#
if [[ "$OS" == "linux" ]]; then
	$HOME/local/lib/linux/common/libexec/update-jetbrains-mono
	$HOME/local/lib/linux/common/libexec/update-obsidian
	$HOME/local/lib/linux/common/libexec/update-zed
fi
if [[ "$FLAVOR" == "debian" ]]; then
	$HOME/local/lib/linux/debian/common/libexec/update-kitty
fi

# Update Helix grammars
#
hx -g fetch
hx -g build

# Regenerate bat theme cache
#
(
	cd /tmp
	bat cache --build
)

# Need to set up GPG environment here to work around issues on some
# systems
#
export GPG_TTY=$(tty)
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
gpg-connect-agent updatestartuptty /bye

# Git repositories
#
if [[ -d $HOME/src ]]; then
	(
		cd $HOME/src
		while IFS= read -r -d '' OBJECT; do
			if [[ -d $OBJECT/.git ]]; then
				echo "Refreshing $(basename $OBJECT)"
				cd "$OBJECT"
				git pull --recurse-submodules
				if [[ "$(git config --get remote.origin.url)" =~ [^/]+@[^/]+\.[^/]+:.+\.git ]]; then
					git push --recurse-submodules=on-demand
				fi
				cd ..
			fi
		done < <(find . -mindepth 1 -maxdepth 1 -type d -print0)
	)
fi

# macOS system
#
# We do this last as this command may force a reboot
#
if [[ "$OS" == "macos" ]]; then
	softwareupdate --install --all --include-config --include-config-data
fi
